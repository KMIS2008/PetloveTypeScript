{"version":3,"file":"static/js/709.71a8739b.chunk.js","mappings":"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","sources":["components/NoticesItem/NoticeItrm.styled.tsx","components/ModalAttention/ModalAttention.styled.tsx","components/ModalAttention/ModalAttention.tsx","components/ModalNotice/ModalNotice.styled.tsx","components/ModalNotice/ModalNotice.tsx","components/NoticesItem/NoticesItem.tsx","components/NoticesList/NoticeList.styled.tsx","components/NoticesList/NoticesList.tsx","redux/selects.ts"],"sourcesContent":["import styled from \"styled-components\";\n\ninterface ButtonSvgProps{\n    $isDefaultFavorite?:boolean\n}\n\nexport const ContainerItem = styled.li`\npadding: 20px;\n\n@media (min-width: 768px) {\n    width: 100%; \n    margin: 0 auto; \n}\n`\nexport const Img = styled.img`\nborder-radius: 16px;\nmargin-bottom: 20px;\n`\n\nexport const Title = styled.h3`\nfont-family: Manrope;\nfont-size: 16px;\nfont-weight: 700;\nline-height: 1,25;\ncolor: #2B2B2A;\n`\n\nexport const Rating = styled.p`\nfont-family: Manrope;\nfont-size: 14px;\nfont-weight: 500;\nline-height: 1,29;\n`\n\nexport const ContainerList= styled.ul`\ndisplay: flex;\njustify-content: space-between;\nlist-style: none;\nmargin-bottom: 14px;\n`\n\nexport const ContainerTitle= styled.div`\ndisplay: flex;\njustify-content: space-between;\nmargin-bottom: 5px;\n`\n\nexport const ContainerPopulate= styled.div`\ndisplay: flex;\ngap:2px;\njustify-content: center;\nalign-items: center;\n`\n\nexport const TitleTable= styled.p`\nfont-family: Manrope;\nfont-size: 10px;\nfont-weight: 500;\nline-height: 1,4;\nletter-spacing: -0.02em;\ncolor: #26262680;\n`\n\nexport const TextTable= styled.p`\nfont-family: Manrope;\nfont-size: 12px;\nfont-weight: 500;\nline-height: 1,4;\nletter-spacing: -0.02em;\ncolor: #262626;\n`\n\nexport const Comment= styled.p`\nmargin-bottom: 16px;\nfont-family: Manrope;\nfont-size: 14px;\nfont-weight: 500;\nline-height: 1,29;\nletter-spacing: -0.02em;\n\ncolor: #2B2B2A;\n`\n\nexport const ContainerButton= styled.div`\ndisplay: flex;\njustify-content: space-between;\n`\n\nexport const Button = styled.button`\nwidth: 231px;\nheight: 46px;\n\nborder-radius: 30px ;\nbackground: #F6B83D;\n\nbackground: ${p => p.theme.colors.yellow};\n\nfont-family: Manrope;\nfont-size: 14px;\nfont-weight: 500;\nline-height: 1,29px;\nletter-spacing: -0.03em;\ntext-align: center;\ncolor: ${p=>p.theme.colors.white};\ncursor: pointer;\n`\n\nexport const ButtonSVG = styled.button<ButtonSvgProps>`\nwidth: 46ppx;\nheight: 46px;\npadding: 14px;\ngap: 10px;\nborder-radius: 30px;\nbackground-color: #FFF4DF;\n\nbackground-color: ${(props) => (props.$isDefaultFavorite ? '#FBE7C1' : '#FFF4DF')};\ncursor: pointer;\n\n&:hover{\n    background-color: #FBE7C1;\n}\n\n`\n\n\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\nposition: relative;\npadding-top: 40px;\n`\n\nexport const SvgButton = styled.div`\ndisplay: block;\nposition:absolute;\nright: 0; top: 0;\nborder: none;\nmargin-left: auto;\ncursor: pointer;\n`\n\nexport const ContainerSvg = styled.div`\ndisplay: block;\nmargin: 0 auto;\nmargin-bottom: 20px;\npadding:18px;\nwidth: 80px;\nheight: 80px;\nborder-radius: 50%;\nbackground-color: #FFF4DF;\n`\n\nexport const Img = styled.img`\ndisplay: block;\nmargin: auto;\n`\n\nexport const Title = styled.h2`\nmargin-bottom: 20px;\nfont-family: Manrope;\nfont-size: 20px;\nfont-weight: 700;\nline-height: 1;\nletter-spacing: -0.03em;\ntext-align: center;\ncolor: ${p => p.theme.colors.yellow};\n`\n\nexport const Text = styled.p`\nmargin-bottom: 20px;\nfont-family: Manrope;\nfont-size: 14px;\nfont-weight: 500;\nline-height: 1,29px;\nletter-spacing: -0.02em;\ntext-align: center;\ncolor: #2B2B2A;\n`","import Modal from \"react-modal\";\nimport { useEffect } from \"react\";\nimport {Container, SvgButton, ContainerSvg, Img, Title, Text} from './ModalAttention.styled';\nimport sprite from '../../images/sprite.svg';\nimport dog_small from '../../images/dog_small.jpg';\nimport React from \"react\";\n\nimport { AuthNav } from '../AuthNav/AuthNav';\n\ninterface ModalAttentionProps{\n  isOpenModalAttention:boolean,\n  setIsOpenModalAttention:(isOpenModalAttention:boolean)=>void\n}\n\nModal.setAppElement('#modal');\n\nexport const ModalAttention:React.FC<ModalAttentionProps> = ({ isOpenModalAttention, setIsOpenModalAttention }) => {\n\n\n    const customStyles = {\n      overlay: {\n        backgroundColor: \"rgba(38, 38, 38, 0.3)\",\n      },\n      content: {\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n        padding: \"20px\",\n        maxWidth: \"335px\",\n        maxHeight: \"394px\",\n        borderRadius: \"30px\",\n        backgroundColor: \"#FFFFFF\",\n      },\n    };\n  \n    useEffect(() => {\n      if (isOpenModalAttention) {\n        document.body.classList.add('no-scroll');\n      } else {\n        document.body.classList.remove('no-scroll');\n      }\n  \n      return () => {\n        document.body.classList.remove('no-scroll');\n      };\n    }, [isOpenModalAttention]);\n    \n      return (\n        <>\n        <Modal   \n          isOpen={isOpenModalAttention}\n          onRequestClose={() => {\n            setIsOpenModalAttention(false);\n          }}\n               \n          style={customStyles}\n  \n          contentLabel=\"More info modal\"     \n        >\n  <Container>\n          <SvgButton\n             onClick={() => {\n                setIsOpenModalAttention(false);\n             }}>\n              <svg width= '24px' height='24px'>\n                  <use xlinkHref={sprite + '#icon-x'} />\n              </svg> \n           </SvgButton>\n\n           <ContainerSvg>\n             <Img src={dog_small} alt=\"small-dog\" width= '44px' height='44px'/>\n           </ContainerSvg>\n  \n           <Title>Attention</Title>\n  \n           <Text>We would like to remind you that certain functionality is available only to authorized users.If you have an account, please log in with your credentials.\n             If you do not already have an account, you must register to access these features.\n           </Text>\n\n           <AuthNav />\n  \n  </Container>\n  \n        </Modal>\n        </>\n      );\n    }; ","import styled from \"styled-components\";\n\nexport const Container = styled.div`\nposition: relative;\npadding-top: 40px;\n`\n\nexport const SvgButton = styled.div`\ndisplay: block;\nposition:absolute;\nright: 0; top: 0;\nborder: none;\nmargin-left: auto;\n`\nexport const ContainerImg = styled.div`\nposition: relative;\n`\n\nexport const Svg = styled.div`\nposition: absolute;\ntop: 0;\nleft: 30%;\ndisplay: block;\npadding: 8px 14px 8px 14px;\nwidth: 52px;\nheight: 34px;\nborder-radius: 30px;\nbackground-color: #FFF4DF;\n\nfont-family: Manrope;\nfont-size: 14px;\nfont-weight: 500;\nline-height: 1,29px;\nletter-spacing: -0.02em;\ntext-align: center;\n\ncolor: ${p => p.theme.colors.yellow};\n`\n\nexport const Img = styled.img`\ndisplay: block;\nmargin: auto;\nmargin-bottom: ${p => p.theme.spacing(4)};\nwidth: 120px;\nheight: 120px;\nborder-radius: 50%;\n`\n\nexport const Title = styled.h2`\nmargin-bottom: 8px;\nfont-family: Manrope;\nfont-size: 16px;\nfont-weight: 700;\nline-height: 1,25;\n\ntext-align: center;\ncolor: #2B2B2A;\n`\nexport const ContainerPopulate = styled.div`\ndisplay: flex;\njustify-content: center;\ngap: 64px;\nmargin-bottom: 8px;\n`\nexport const Rating = styled.p`\nfont-family: Manrope;\nfont-size: 14px;\nfont-weight: 500;\nline-height: 1,29;\n`\nexport const ContainerList= styled.ul`\ndisplay: flex;\njustify-content: space-between;\nlist-style: none;\nmargin-bottom: 14px;\n`\nexport const TitleTable= styled.p`\nfont-family: Manrope;\nfont-size: 10px;\nfont-weight: 500;\nline-height: 1,4;\nletter-spacing: -0.02em;\ncolor: #26262680;\n`\n\nexport const Text= styled.p`\nfont-family: Manrope;\nfont-size: 14px;\nfont-weight: 500;\nline-height: 1,29;\nletter-spacing: -0.02em;\n\ncolor: #2B2B2A;\n`\n\nexport const Comment= styled.p`\nmargin-bottom: 16px;\nfont-family: Manrope;\nfont-size: 14px;\nfont-weight: 500;\nline-height: 1,29;\nletter-spacing: -0.02em;\n\ncolor: #2B2B2A;\n`\n\nexport const ContainerButton= styled.div`\ndisplay: flex;\ngap: 8px;\njustify-content: center;\nalign-items: center;\n`\nexport const ButtonAdd= styled.button`\ndisplay: flex;\nmargin: auto;\nalign-items: center;\njustify-content: center;\ngap: 4px;\nbackground-color: ${p => p.theme.colors.yellow};\nborder-radius: 30px;\nwidth: 135px;\nheight: 44px;\n\nfont-family: Manrope;\nfont-size: 16px;\nfont-weight: 500;\nline-height: 1,25;\nletter-spacing: -0.03em;\ntext-align: center;\ncolor:${p => p.theme.colors.white};\ncursor: pointer;\n\n&:hover{\n    background-color: #F9B020;\n}\n`\n\nexport const ButtonContact= styled.a`\ndisplay: flex;\nmargin: auto;\nalign-items: center;\njustify-content: center;\nbackground-color: ${p => p.theme.colors.rose};\nborder-radius: 30px;\nwidth: 135px;\nheight: 44px;\n\nfont-family: Manrope;\nfont-size: 16px;\nfont-weight: 500;\nline-height: 1,25;\nletter-spacing: -0.03em;\ntext-align: center;\ncolor:${p => p.theme.colors.yellow};\n\n&:hover{\n    background-color: #FBE7C1;\n}\n`","import Modal from \"react-modal\";\nimport { useEffect, FC } from \"react\";\nimport {Container, SvgButton, ContainerImg, Svg, Img, Title, ContainerPopulate, Rating,ContainerList, TitleTable, Text,\n        Comment, ContainerButton, ButtonAdd, ButtonContact } from './ModalNotice.styled';\nimport sprite from '../../images/sprite.svg';\nimport {addNotices, removeNotices} from '../../redux/operations';\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../redux/store\";\n\n\n\nconst useAppDispatch:()=>AppDispatch=useDispatch;\n\ninterface NoticeProps{\n  imgURL:string ,\n  title:string , \n  popularity:string , \n  comment:string , \n  name:string , \n  birthday:string , \n  species:string , \n  sex:string , \n  category:string , \n  _id:string, \n  user:any \n}\n\ninterface ModalNoticeProps{\n  isOpenModalNotice:boolean, \n  setIsOpenModalNotice:(isOpenModalNotice:boolean)=>void, \n  notice:NoticeProps, \n  setFavorite:(isFavorite:boolean)=>void, \n  isFavorite:boolean\n}\n\nModal.setAppElement('#modal');\n\nexport const ModalNotice:FC<ModalNoticeProps> = ({ isOpenModalNotice, setIsOpenModalNotice, notice, setFavorite, isFavorite }) => {\n    const {imgURL ,title, popularity, comment, name, birthday, species, sex, category, _id, user}=notice;\n    const dispatch=useAppDispatch();\n\n    const customStyles = {\n      overlay: {\n        backgroundColor: \"rgba(38, 38, 38, 0.3)\",\n       \n      },\n      content: {\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\",\n        padding: \"20px\",\n        maxWidth: \"335px\",\n        maxHeight: \"446px\",\n        borderRadius: \"30px\",\n        backgroundColor: \"#FFFFFF\",\n      },\n    };\n\n    useEffect(() => {\n      if (isOpenModalNotice) {\n        document.body.classList.add('no-scroll');\n      } else {\n        document.body.classList.remove('no-scroll');\n      }\n  \n      return () => {\n        document.body.classList.remove('no-scroll');\n      };\n    }, [isOpenModalNotice]);\n\n    const handleAddFavorite = (_id:string) => {\n      if (!isFavorite) {\n          dispatch(addNotices(_id));\n          setFavorite(true)\n      } else {\n        dispatch(removeNotices(_id));\n        setFavorite(false)\n      }\n  };\n\n      return (\n        <>\n        <Modal   \n          isOpen={isOpenModalNotice}\n          onRequestClose={() => {\n            setIsOpenModalNotice(false);\n          }}\n               \n          style={customStyles}\n          contentLabel=\"More info modal\"     \n        >\n  <Container>\n          <SvgButton\n             onClick={() => {\n                setIsOpenModalNotice(false);\n             }}>\n              <svg width= '24px' height='24px'>\n                  <use xlinkHref={sprite + '#icon-x'} />\n              </svg> \n           </SvgButton>\n\n           <ContainerImg>\n            <Img src={imgURL} alt={title} />\n\n            <Svg>{category}</Svg>            \n           </ContainerImg>\n     \n           <Title>{title}</Title>\n\n           <ContainerPopulate>\n                 <svg width={16} height={16}>\n                    <use xlinkHref={sprite + '#icon-star'} />\n                 </svg>      \n                 <Rating>{popularity}</Rating>          \n              </ContainerPopulate>\n              <ContainerList>\n\n                 <li>\n                    <TitleTable>Name</TitleTable>\n                    <Text>{name}</Text>\n                 </li>\n                 <li>\n                    <TitleTable>Birthday</TitleTable>\n                    <Text>{birthday}</Text>\n                 </li>\n                 <li>\n                    <TitleTable>Sex</TitleTable>\n                    <Text>{sex}</Text>\n                 </li>\n                 <li>\n                    <TitleTable>Species</TitleTable>\n                    <Text>{species}</Text>\n                 </li>\n              </ContainerList>\n\n              <Comment>{comment}</Comment>\n\n              <ContainerButton>\n                <ButtonAdd type=\"button\" onClick={() => handleAddFavorite(_id)}> Add to\n                     <svg width={16} height={16}>\n                         <use xlinkHref={sprite + '#icon-heart-3'} />\n                     </svg>  \n                </ButtonAdd>\n                {user?.phone && (\n                  <ButtonContact as=\"a\" href={`tel:${user.phone}`}>Contact</ButtonContact>\n                )}\n              </ContainerButton>\n    \n  </Container>\n  \n        </Modal> \n        </>\n      );\n    }; ","import sprite from '../../images/sprite.svg';\nimport {Button,Title, Img, ContainerList, ContainerTitle, ContainerPopulate,\n        Rating, TitleTable, Comment, ContainerButton, ContainerItem, ButtonSVG\n} from './NoticeItrm.styled';\nimport {ModalAttention} from '../ModalAttention/ModalAttention';\nimport {ModalNotice} from '../ModalNotice/ModalNotice';\nimport { useState } from 'react';\nimport { useSelector,useDispatch } from 'react-redux';\nimport {selectIsLoggedIn} from '../../redux/auth/selects';\nimport {selectorFavorite, selectorNoticesId} from '../../redux/selects';\nimport {addNotices, removeNotices, fetchNoticesId, fetchUserFull} from '../../redux/operations';\nimport { AppDispatch } from '../../redux/store';\n\nconst useAppDispatch:()=>AppDispatch=useDispatch;\n\n \nexport const NoticesItem=({notice, trash})=>{\n\n    const dispatch=useAppDispatch();\n\n    const isLoggedIn = useSelector(selectIsLoggedIn);\n    \n    const favorites = useSelector(selectorFavorite);\n    const noticeId=useSelector(selectorNoticesId);\n   \n    const {imgURL ,title, popularity, comment, name, birthday, species, category, sex, _id}=notice;\n    const [isOpenModalAttention, setIsOpenModalAttention ] =useState(false);\n    const [isOpenModalNotice, setIsOpenModalNotice ] =useState(false);\n    const [isFavorite, setFavorite]=useState(favorites.includes(_id));\n\n    const openModalAttention=()=>{\n        setIsOpenModalAttention(true);\n    }\n\n    const openModalNotice=()=>{\n        setIsOpenModalNotice(true);\n    }\n\n    const handleAction = (_id:string) => {\n        if (isLoggedIn) {\n            openModalNotice();\n            dispatch(fetchNoticesId(_id))\n        } else {\n            openModalAttention();\n        }\n    }\n\n    const handleToggetFavorite = (_id:string) => {\n        if (!isFavorite) {\n            dispatch(addNotices(_id)); \n            setFavorite(true)\n           console.log( favorites)\n        } else\n     {      dispatch(removeNotices(_id));\n            setFavorite(false)\n            console.log( favorites)}\n    };\n\n    const handleActionFavorite = (_id:string) => {\n        if (isLoggedIn) {\n            handleToggetFavorite(_id);\n        } else {\n            openModalAttention();\n        }\n    };\n\n    const handleDeleteFavorite = async (_id:string) => {\n        try {\n            await dispatch(removeNotices(_id));\n            setFavorite(false);\n            await dispatch(fetchUserFull());\n        } catch (error) {\n            console.error(\"Error deleting favorite notice:\", error);\n        }\n    };\n\n    return(\n        <ContainerItem>\n            <Img src= {imgURL} alt={title}/>\n           <ContainerTitle>\n              <Title>{title}</Title>\n              <ContainerPopulate>\n                 <svg width={16} height={16}>\n                    <use xlinkHref={sprite + '#icon-star'} />\n                 </svg>      \n                 <Rating>{popularity}</Rating>          \n              </ContainerPopulate>\n            </ContainerTitle>  \n\n            <ContainerList>\n\n                <li>\n                    <TitleTable>Name</TitleTable>\n                    <p>{name}</p>\n                </li>\n                <li>\n                    <TitleTable>Birthday</TitleTable>\n                    <p>{birthday}</p>\n                </li>\n                <li>\n                    <TitleTable>Sex</TitleTable>\n                    <p>{sex}</p>\n                </li>\n                <li>\n                    <TitleTable>Species</TitleTable>\n                    <p>{species}</p>\n                </li>\n                <li>\n                    <TitleTable>Category</TitleTable>\n                    <p>{category}</p>\n                </li>\n                 \n            </ContainerList>\n            \n           <Comment>{comment}</Comment>\n           <ContainerButton>\n            \n               <Button type='button' onClick={()=>handleAction(_id)}>Learn more</Button>\n               {trash&&\n               <ButtonSVG onClick={() => handleDeleteFavorite(_id)}>\n                   <svg width={18} height={18}>\n                      <use xlinkHref={sprite + '#icon-trash-2'} />\n                   </svg>                \n               </ButtonSVG>}\n\n               {!trash&&<ButtonSVG $isDefaultFavorite={isFavorite} onClick={() => handleActionFavorite(_id)}>\n                   <svg width={18} height={18}>\n                      <use xlinkHref={sprite + '#icon-heart'} />\n                   </svg>                \n               </ButtonSVG>}\n               \n           </ContainerButton>\n\n           <ModalAttention isOpenModalAttention={isOpenModalAttention} setIsOpenModalAttention={setIsOpenModalAttention}/>\n           <ModalNotice notice={noticeId}  \n           setFavorite={setFavorite} isFavorite={isFavorite} \n           isOpenModalNotice={isOpenModalNotice} setIsOpenModalNotice={setIsOpenModalNotice}/>\n        \n        </ContainerItem>\n    )\n}","import styled from \"styled-components\";\n\n\nexport const Container = styled.ul`\n\nlist-style: none;\n\ndisplay: grid;\n    grid-template-columns: 1fr;\n    gap: 16px;\n\n    @media (min-width: 768px) and (max-width: 1279px) {\n        grid-template-columns: 1fr 1fr; \n    }\n\n    @media (min-width: 1280px) {\n        grid-template-columns: 1fr 1fr 1fr; \n    }\n`\n\n","import {NoticesItem} from '../NoticesItem/NoticesItem';\nimport {Container} from './NoticeList.styled';\nimport React from 'react';\n\ninterface NoticeProps{\n    imgURL:string,\n    title:string, \n    popularity:string, \n    comment:string, \n    name:string, \n    birthday:string, \n    species:string, \n    category:string, \n    sex:string, \n    _id:string\n}\n\ninterface NotticeListProps{\n    notices:NoticeProps[],\n    trash:boolean\n}\n\nexport const NoticesList:React.FC<NotticeListProps>=({notices, trash=false})=>{\n\n    return (\n        <Container>\n            {notices?.map(iterm=>( \n            <NoticesItem key={iterm._id} notice={iterm} trash={trash}/>\n        ))}\n        \n        </Container>\n    )\n}","import { RootState } from \"../redux/store\";\n\n  \n  export const selectorNews=(state:RootState)=>state.news.news;\n  export const selectorTotalPages=(state:RootState)=>state.news.totalPages;\n  export const selectorTotPages=(state:RootState)=>state.notices.totalPages;\n  export const selectorNotices=(state:RootState)=>state.notices.notices;\n  export const selectorNoticesId=(state:RootState)=>state.notices.noticeId;\n  export const selectorFavorite=(state:RootState)=>state.notices.isFavorite;\n  export const selectorFriends=(state:RootState)=>state.friends.friends;\n  export const selectorPets=(state:RootState)=>state.user.pets;\n  export const selectorUserFull=(state:RootState)=>state.user.userFull;"],"names":["ContainerItem","styled","_templateObject","_taggedTemplateLiteral","Img","_templateObject2","Title","_templateObject3","Rating","_templateObject4","ContainerList","_templateObject5","ContainerTitle","_templateObject6","ContainerPopulate","_templateObject7","TitleTable","_templateObject8","Comment","_templateObject9","_templateObject10","ContainerButton","_templateObject11","Button","_templateObject12","p","theme","colors","yellow","white","ButtonSVG","_templateObject13","props","$isDefaultFavorite","Container","SvgButton","ContainerSvg","Text","Modal","ModalAttention","_ref","isOpenModalAttention","setIsOpenModalAttention","useEffect","document","body","classList","add","remove","_jsx","_Fragment","children","isOpen","onRequestClose","style","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","padding","maxWidth","maxHeight","borderRadius","contentLabel","_jsxs","onClick","width","height","xlinkHref","sprite","src","alt","AuthNav","ContainerImg","Svg","spacing","ButtonAdd","_templateObject14","ButtonContact","_templateObject15","rose","useAppDispatch","useDispatch","ModalNotice","isOpenModalNotice","setIsOpenModalNotice","notice","setFavorite","isFavorite","imgURL","title","popularity","comment","name","birthday","species","sex","category","_id","user","dispatch","type","removeNotices","addNotices","handleAddFavorite","phone","as","href","concat","NoticesItem","trash","isLoggedIn","useSelector","selectIsLoggedIn","favorites","selectorFavorite","noticeId","selectorNoticesId","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","includes","_useState6","openModalAttention","handleAction","fetchNoticesId","handleActionFavorite","console","log","handleToggetFavorite","handleDeleteFavorite","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","fetchUserFull","t0","error","stop","_x","apply","arguments","NoticesList","notices","_ref$trash","map","iterm","selectorNews","state","news","selectorTotalPages","totalPages","selectorNotices","selectorFriends","friends","selectorUserFull","userFull"],"sourceRoot":""}